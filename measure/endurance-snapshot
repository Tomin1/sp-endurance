#!/bin/sh
#
# Script for saving endurance snapshots.
# This file is part of sp-endurance.
#
# Copyright (C) 2006-2012 by Nokia Corporation
#
# Contact: Eero Tamminen <eero.tamminen@nokia.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# version 2 as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
# 02110-1301 USA

script="${0##*/}"
# incorrect number of arguments or first argument starts with "-"
if [ $# -lt 1 ] || [ $# -gt 2 ] || [ "${1#-}" != "$1" ]; then
	echo
	echo "usage: $script <use-case-name> [step description]"
	echo
	echo "example: $script file-ops 'load large file'"
	echo
	echo "This saves required endurance data to a directory with"
	echo "given use-case name and optional use-case step description."
	echo "Data from each new snapshot is saved into a numerically "
	echo "named subdirectories (starting from 000), like this:"
	echo "<use-case-name>/"
	echo "+ 000/"
	echo " - bootreason   (why device last booted)"
	echo " - component_version (HW identification)"
	echo " - ifconfig     (output of /sbin/ifconfig)"
	echo " - df           (disk usage information)"
	echo " - dsme/        (DSME lifeguard statistics)"
	echo " - interrupts   (number of different HW interrupts)"
	echo " - open-fds     (list of files/sockets open by processes)"
	echo " - slabinfo     (information about kernel caches, see slabinfo(5))"
	echo " - diskstats    (disk I/O statistics for each disk device)"
	echo " - zoneinfo     (information about memory zones)"
	echo " - smaps.cap    (SMAPS memory usage data)"
	echo " - sched        (process scheduling information)"
	echo " - stat         (kernel/system statistics, see proc(5))"
	echo " - syslog       (syslog contents)"
	echo " - usage.csv    (/proc info + X resource & disk usage in CSV format)"
	echo " - xmeminfo     (X server resource usage information)"
	echo " - xmeminfo.log (XRes related error messages from xmeminfo)"
	echo " - bmestat      (Battery information from Battery Management Entity)"
	echo " - cgroups      (Control Group information)"
	echo " - ramzswap     (ramzswap statistics)"
	echo " - step.txt     (current use-case step description)"
	echo " - upstart/     (upstart service logs)"
	echo " - journal.lzo  (journal logs from systemd)"
	echo "+ 001/"
	echo "+ 002/"
	echo "etc."
	echo
	exit 1
fi

check_display () {
	if [ -z "$DISPLAY" ]; then
		echo "$script: WARNING, DISPLAY is not set, defaulting to ':0'." 1>&2
		export DISPLAY=":0"
	fi
}

parse_from_release_file() {
	local value=$1
	local file=$2
	sed -n "s/^${value}=\"\?\([^\"]*\)\"\?$/\1/p" "$file"
}

dump_statefs_value() {
	STATEFS_DIR=/run/state
	file=$STATEFS_DIR/$1
	if [ -f "$file" ]; then
		echo "$1="$(cat "$file") >> $path/statefs
	fi
}

# do some basic sanity checks
type proc2csv >/dev/null 2>/dev/null
if [ $? -ne 0 ] ; then
	echo "$script: ERROR, 'proc2csv' tool is missing from PATH" 1>&2
	exit 1
fi
if [ "${1#* }" != "$1" ]; then
	echo "$script: ERROR, argument '$1' contains space(s)" 1>&2
	exit 1
fi
name=$1

if type lzop >/dev/null 2>/dev/null ; then
	COMPRESSOR="lzop -c"
	COMPRESSOR_SUFFIX=".lzo"
elif type gzip >/dev/null 2>/dev/null ; then
	COMPRESSOR="gzip -c"
	COMPRESSOR_SUFFIX=".gz"
else
	COMPRESSOR="cat"
	COMPRESSOR_SUFFIX=""
fi

# real dumb way to do find free index, but normally this should be
# run less than 100 times...
snapshot_index=0
while [ $snapshot_index -lt 1000 ] ; do
	path="$name/`printf "%03d" $snapshot_index`"
	if [ ! -d "$path" ]; then
		break
	fi
	snapshot_index=$((snapshot_index + 1))
done

if [ -z "$path" ] ; then
	echo "$script: ERROR, unable to determine snapshot directory!" >&2
	exit 1
fi

# directory for storing the new statistics
echo "Saving to $path:"
mkdir -p $path

# optional use-case step description
if [ $# -gt 1 ]; then
	echo "- use-case step description"
	echo "$2" > $path/step.txt
else
	echo "- use-case step description (focused/topmost window)"
	if type xprop >/dev/null 2>/dev/null ; then
		check_display
		# _NET_ACTIVE_WINDOW standard property tells focused window,
		# WM_CLASS tells the "name" of the application owning that.
		win=$(xprop -root _NET_ACTIVE_WINDOW)
		RET=$?
		if [ $RET -ne 0 ] ; then
			echo "$script: WARNING, xprop failed with exit code $RET, check \$DISPLAY and \$XAUTHORITY." 1>&2
			echo "$script: For some platforms, copy of ~/.Xauthority from the user owning the X session is needed." 1>&2
		else
			win=$(echo "$win" | cut -s -d'#' -f2)
			if [ \! -z $win ]; then
				app=$(xprop -id $win WM_CLASS|cut -s -d'"' -f2)
				if [ -z "$app" ]; then
					app=$(xprop -id $win WM_NAME|cut -s -d'"' -f2)
				fi
				echo "$app" > $path/step.txt
			fi
		fi
	else
		echo "$script: WARNING, 'xprop' tool is missing from PATH" 1>&2
	fi
fi

# save memory statistics
echo "- SMAPS data"
type sp_smaps_snapshot >/dev/null 2>/dev/null
if [ $? -ne 0 ] ; then
	for pid in /proc/[0-9]*; do
		echo "==> $pid/smaps <=="
		awk '{print "#"$1,$2}' < $pid/status
		if [ -f $pid/smaps ] ; then
			cat $pid/smaps
		elif [ -f $pid/maps ] ; then
			cat $pid/maps
		fi
	done | $COMPRESSOR | sp-noncached --write $path/smaps.cap$COMPRESSOR_SUFFIX
else
	sp_smaps_snapshot | $COMPRESSOR | sp-noncached --write $path/smaps.cap$COMPRESSOR_SUFFIX
fi

# save most of /proc
echo "- /proc/ data in CSV format"
{
echo "generator = syte-endurance-stats v3.0"
echo
# software release identification
if type sysinfoclient >/dev/null 2>/dev/null ; then
	# Harmattan
	echo "SW-version = $(sysinfoclient -p /device/sw-release-ver)"
elif [ \! -z "$OSSO_VERSION" ]; then
	# earlier Maemo releases
	echo "SW-version = $OSSO_VERSION"
elif type osso-product-info >/dev/null 2>/dev/null ; then
	# Diablo/Fremantle
	echo "SW-version = $(osso-product-info -q OSSO_VERSION)"
elif [ -e "/etc/os-release" ]; then
	# Mer, Sailfish
	echo "SW-version = $(parse_from_release_file VERSION /etc/os-release)"
else
	# not Maemo
	echo "SW-version = $(uname -mrs)"
fi
echo "date = $(date +'%F %T')"
# all relevant info from the /proc that is easy to parse
proc2csv -p
RET=$?
if [ $RET -ne 0 ]; then
	echo "$script: WARNING, proc2csv failed with exit code $RET." 1>&2
fi
} | sp-noncached --write $path/usage.csv

# Copy files from /proc with cat to avoid GNU coreutils 6.x cp bug:
echo "- Other proc files"
for F in slabinfo interrupts stat diskstats zoneinfo pagetypeinfo; do
	if [ ! -f /proc/$F ]; then continue; fi
	cat /proc/$F > $path/$F
	[ -f $path/$F ] && [ ! -s $path/$F ] && rm $path/$F
done

if [ -f "/proc/sys/kernel/tainted" ] ; then
	cat /proc/sys/kernel/tainted > $path/tainted
	[ -f $path/tainted ] && [ ! -s $path/tainted ] && rm $path/tainted
fi

if [ -f "/proc/sys/kernel/random/boot_id" ] ; then
	cat /proc/sys/kernel/random/boot_id > $path/boot_id
	[ -f $path/boot_id ] && [ ! -s $path/boot_id ] && rm $path/boot_id
fi

type xmeminfo >/dev/null 2>/dev/null
if [ $? -eq 0 ] ; then
	echo "- X resource usage"
	check_display
	xmeminfo > $path/xmeminfo 2> $path/xmeminfo.log
	RET=$?
	if [ $RET -ne 0 ]; then
		cat $path/xmeminfo.log 1>&2
		echo "$script: WARNING, xmeminfo failed with exit code $RET, check \$DISPLAY and \$XAUTHORITY." 1>&2
	fi
fi

# save some less easily parsed /proc/ statistics, ignore errors
echo "- Open file descriptors"
ls -l /proc/[0-9]*/fd/ 2>/dev/null | $COMPRESSOR | sp-noncached --write $path/open-fds$COMPRESSOR_SUFFIX

if [ -f "/proc/1/sched" ] ; then
	echo "- Process scheduling information"
	head -v -n 10000 /proc/[0-9]*/sched | $COMPRESSOR | sp-noncached --write $path/sched$COMPRESSOR_SUFFIX
fi

# suspend statistics
type mcetool >/dev/null 2>/dev/null
if [ $? -eq 0 ] ; then
        echo "- Suspend stats"
        mcetool --get-suspend-stats > $path/suspend-stats
fi

type sysinfoclient >/dev/null 2>/dev/null
if [ $? -eq 0 ] ; then
	echo "- Bootreason"
	sysinfoclient -p /component/boot-reason > $path/bootreason

	echo "- HW identification"
	{
		echo "product     `sysinfoclient -p /component/product`"
		echo "hw-build    `sysinfoclient -p /component/hw-build`"
		echo "nolo        `sysinfoclient -p /component/nolo`"
		echo "boot-mode   `sysinfoclient -p /component/boot-mode`"
	} > $path/component_version
elif [ -e /etc/hw-release ]; then
	# Sailfish
	{
		echo "product  `parse_from_release_file NAME /etc/hw-release`"
		echo "hw-build `parse_from_release_file VERSION /etc/hw-release`"
	} > $path/component_version
fi
if [ -d /syspart ] ; then
	echo "- Control Group data"
	find /syspart -type f | xargs head -v -n 10000 2>/dev/null > $path/cgroups
	[ -f $path/cgroups ] && [ ! -s $path/cgroups ] && rm $path/cgroups
fi

if [ -d /sys/devices/system/cpu ] ; then
	echo "- CPU statistics"
	find /sys/devices/system/cpu -type f | xargs head -v -n 10000 2>/dev/null > $path/sysfs_cpu
	[ -f $path/sysfs_cpu ] && [ ! -s $path/sysfs_cpu ] && rm $path/sysfs_cpu
fi
if [ -d /sys/fs ] ; then
	echo "- File system statistics"
	# Skip /sys/fs/selinux/policy - it can be several megabytes of binary.
	find /sys/fs -type f | grep -v -F "/sys/fs/selinux/policy" | xargs head -v -n 10000 2>/dev/null > $path/sysfs_fs
	[ -f $path/sysfs_fs ] && [ ! -s $path/sysfs_fs ] && rm $path/sysfs_fs
fi
if [ -d /sys/devices/virtual/kgsl/kgsl/proc ] ; then
        echo "- GPU memory values"
        find /sys/devices/virtual/kgsl/kgsl/proc -type f | xargs head -v -n 10000 2>/dev/null > $path/sysfs_kgsl
        [ -f $path/sysfs_kgsl ] && [ ! -s $path/sysfs_kgsl ] && rm $path/sysfs_kgsl
fi
if [ -d /sys/class/backlight ] ; then
	echo "- Backlight"
	# Expecting symlinks in /sys/class/backlight/, e.g. 'display0', ...
	for D in /sys/class/backlight/* ; do
		if [ -d "$D/" ] ; then
			find $D/ -type f | xargs head -v -n 10000 2>/dev/null
			echo
		fi
	done > $path/sysfs_backlight
	[ -f $path/sysfs_backlight ] && [ ! -s $path/sysfs_backlight ] && rm $path/sysfs_backlight
fi

type rzscontrol >/dev/null 2>/dev/null
if [ $? -eq 0 ] ; then
	echo "- ramzswap statistics"
	for D in /dev/ramzswap[0-9]* ; do
		echo "==> $D <=="
		rzscontrol "$D" --stats
		RET=$?
		if [ $RET -ne 0 ] ; then
			echo "$script: WARNING, rzscontrol exited with non-zero return value $RET when collecting statistics for device '$D'." 1>&2
		fi
	done > $path/ramzswap
	[ -f $path/ramzswap ] && [ ! -s $path/ramzswap ] && rm $path/ramzswap
fi

# battery
type bmestat >/dev/null 2>/dev/null
if [ $? -eq 0 ] ; then
	echo "- Battery information"
	bmestat > $path/bmestat
	[ -f $path/bmestat ] && [ ! -s $path/bmestat ] && rm $path/bmestat
fi
if [ -d "/sys/class/power_supply/" ] ; then
	# Expecting symlinks in /sys/class/power_supply/, e.g. 'BAT0', ...
	for D in /sys/class/power_supply/* ; do
		if [ -d "$D/" ] ; then
			find $D/ -type f | xargs head -v -n 10000 2>/dev/null
			echo
		fi
	done > $path/sysfs_power_supply
	[ -f $path/sysfs_power_supply ] && [ ! -s $path/sysfs_power_supply ] && rm $path/sysfs_power_supply
fi

echo "- /sbin/ifconfig"
/sbin/ifconfig -a > $path/ifconfig

if [ -d /var/lib/dsme ] ; then
	echo "- DSME statistics"
	cp -a /var/lib/dsme $path/
	# Do not bother with empty directory:
	rmdir $path/dsme >/dev/null 2>/dev/null
fi

if [ -f /var/lib/upstart/jobs_respawned ] ; then
	echo "- Upstart respawned jobs"
	cp /var/lib/upstart/jobs_respawned $path/upstart_jobs_respawned 2>/dev/null
fi

if [ -d /var/log/upstart ]; then
	echo "- Upstart service logs"
	mkdir $path/upstart
	for F in /var/log/upstart/*; do
		if [ -f "$F" ] && [ -s "$F" ] ; then
			logto=$path/upstart/${F##*/}$COMPRESSOR_SUFFIX
			sp-noncached --read $F | $COMPRESSOR | sp-noncached --write $logto
			[ -f $logto ] && [ ! -s $logto ] && rm $logto
		fi
	done
fi

echo "- Disk usage"
LC_ALL=C df -k -P > $path/df

echo "- statefs"
dump_statefs_value namespaces/Screen/Blanked

# and syslog...
logs=""
if [ -f /var/ftd-log/syslog ]; then
	logs="/var/ftd-log/logs/syslog /var/ftd-log/syslog $logs"
fi
if [ -f /var/log/syslog ]; then
	logs="/var/log/syslog $logs"
fi
if [ -f /var/log/syslog.old ]; then
	logs="/var/log/syslog.old $logs"
fi
if [ -f /var/log/logs/syslog ] ; then
	logs="/var/log/logs/syslog $logs"
fi
if [ -f /var/log/messages ] ; then
	logs="/var/log/messages $logs"
fi
if [ -z "$logs" ] ; then
	echo "- dmesg"
	dmesg | $COMPRESSOR | sp-noncached --write $path/dmesg$COMPRESSOR_SUFFIX
else
	echo "- Syslog(s)"
	sp-noncached --read $logs | $COMPRESSOR | sp-noncached --write $path/syslog$COMPRESSOR_SUFFIX
fi

# and journalctl
if [ -x /bin/journalctl ]; then
	echo "- journalctl"

	logger -t endurance-snapshot "End of snapshot $path"

	previous_snapshot="$name/`printf "%03d" $(($snapshot_index - 1))`"

	snapshot_start_cursor=$( \
		/bin/journalctl -b -o export -r -n 1 \
			SYSLOG_IDENTIFIER=endurance-snapshot \
			MESSAGE="End of snapshot $previous_snapshot" 2>/dev/null | \
		sed -n 's/^__CURSOR=\(.*\)$/\1/p')

	if [ -n "$snapshot_start_cursor" ]; then
		snapshot_start_cursor="-c $snapshot_start_cursor"
	fi

	/bin/journalctl -a -b -q -o json $snapshot_start_cursor | \
		$COMPRESSOR | \
		sp-noncached --write $path/journal$COMPRESSOR_SUFFIX
fi
